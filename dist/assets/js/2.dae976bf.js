(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{156:function(r,t,a){r.exports=a.p+"assets/img/nginx-request-handle.7cdd5f98.jpg"},157:function(r,t,a){r.exports=a.p+"assets/img/process-structure.bad2c9ca.jpg"},158:function(r,t,a){r.exports=a.p+"assets/img/signal.1c0b12ca.jpg"},159:function(r,t,a){r.exports=a.p+"assets/img/event-loop.a3d58c7d.jpg"},160:function(r,t,a){r.exports=a.p+"assets/img/modules.dfe0734e.jpg"},181:function(r,t,a){"use strict";a.r(t);var i=[function(){var r=this,t=r.$createElement,i=r._self._c||t;return i("div",{staticClass:"content"},[i("h1",{attrs:{id:"nginx的架构"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#nginx的架构","aria-hidden":"true"}},[r._v("#")]),r._v(" nginx的架构")]),r._v(" "),i("h2",{attrs:{id:"nginx的请求处理流程"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#nginx的请求处理流程","aria-hidden":"true"}},[r._v("#")]),r._v(" nginx的请求处理流程")]),r._v(" "),i("p",[r._v("下面这张图展示了一个请求是如何被nginx处理的\n"),i("img",{attrs:{src:a(156),alt:"nginx请求处理流程图"}}),r._v("\nnginx作为一个流量派发的中间件，主要存在下面三种流量")]),r._v(" "),i("ol",[i("li",[r._v("web")]),r._v(" "),i("li",[r._v("Email")]),r._v(" "),i("li",[r._v("TCP\n图中的非阻塞事件驱动处理引擎会将对应的流量派发给对应的状态机去处理，nginx有对应三个状态机去处理")]),r._v(" "),i("li",[r._v("HTTP状态机")]),r._v(" "),i("li",[r._v("MAIL状态机")]),r._v(" "),i("li",[r._v("传输层状态机")])]),r._v(" "),i("p",[r._v("请求处理结果主要有静态和动态，图中的静态资源就是属于静态，图中的HTTP、Mail代理是通过再请求其它服务器来获取结果，图中的FastCGI、uWSGL、SCGL等是应用层的协议，比如很多后台语言都实现了FastCGI协议，nginx就是通过这个协议去向他们获取请求结果")]),r._v(" "),i("p",[r._v("请求完成后会记录对应的access日志和error日志，通过上述步骤一个请求就完成了")]),r._v(" "),i("h2",{attrs:{id:"nginx的进程结构"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#nginx的进程结构","aria-hidden":"true"}},[r._v("#")]),r._v(" nginx的进程结构")]),r._v(" "),i("p",[r._v("nginx支持多进程和单进程结构，默认nginx开启的是多进程结构。下图是nginx的进程结构模型\n"),i("img",{attrs:{src:a(157),alt:"nginx进程结构图"}}),r._v("\n从图中可以看出，包括如下进程")]),r._v(" "),i("ol",[i("li",[r._v("master process：master负责管理worker进程")]),r._v(" "),i("li",[r._v("child processes")])]),r._v(" "),i("ul",[i("li",[r._v("worker processes：所有的请求都是通过worker进程处理的，处理缓存相关的请求是通过向cache相关进程直接获取结果的，进程之间通信是通过共享内存的方式")]),r._v(" "),i("li",[r._v("cache process：所有缓存相关的处理都会给这些进程")])]),r._v(" "),i("h3",{attrs:{id:"worker进程的个数"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#worker进程的个数","aria-hidden":"true"}},[r._v("#")]),r._v(" worker进程的个数")]),r._v(" "),i("p",[r._v("worker进程的个数可以通过配置文件来设置，通常设置成cpu核的数量，还可以设置将worker进程和对应的CPU进行绑定，以充分利用CPU")]),r._v(" "),i("h2",{attrs:{id:"nginx的进程管理"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#nginx的进程管理","aria-hidden":"true"}},[r._v("#")]),r._v(" nginx的进程管理")]),r._v(" "),i("p",[r._v("nginx进程管理是通过向进程发送不同的信号来实现管理的，如下图\n"),i("img",{attrs:{src:a(158),alt:"nginx进程管理"}}),r._v("\n说明：")]),r._v(" "),i("h3",{attrs:{id:"master进程"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#master进程","aria-hidden":"true"}},[r._v("#")]),r._v(" master进程")]),r._v(" "),i("p",[r._v("master进程会启动并监控worker进程，子进程在关闭时会向父进程发送"),i("code",[r._v("CHLD")]),r._v("信号，父进程收到信号就会重启一个worker进程；还可以向master发送信号来实现对worker进程的管理，master进程收到信号后会将信号发给worker进程，master接收如下信号")]),r._v(" "),i("ul",[i("li",[r._v("TERM,INT：立刻停止nginx的所有进程")]),r._v(" "),i("li",[r._v("QUIT：优雅的停止nginx的所有进程")]),r._v(" "),i("li",[r._v("HUP：重载配置文件")]),r._v(" "),i("li",[r._v("USR1：重新打开日志文件，在做日志文件切割的时候会使用到\n上面四个是可以对应了nginx命令行中的4种命令的，下面这两种只能通过"),i("code",[r._v("kill")]),r._v("命令来向master进程发送，kill命令需要master进程的的pid，这个pid是记录在了"),i("code",[r._v("logs")]),r._v("目录中的"),i("code",[r._v("nginx.pid")]),r._v("文件中，"),i("code",[r._v("nginx -s")]),r._v("m命令也是通过这个文件得到的nginx的master进程ID的")]),r._v(" "),i("li",[r._v("USR2：再启动一个nginx服务，并优雅的将请求过渡给新启动的nginx")]),r._v(" "),i("li",[r._v("WINCH：关闭掉所有的worker进程，保留master进程\n上述两个信号通常在热部署的时候会使用到")])]),r._v(" "),i("h2",{attrs:{id:"reload重载配置文件的真相"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#reload重载配置文件的真相","aria-hidden":"true"}},[r._v("#")]),r._v(" reload重载配置文件的真相")]),r._v(" "),i("p",[r._v("在执行"),i("code",[r._v("nginx -s reload")]),r._v("命令后，发生了如下的事情")]),r._v(" "),i("ol",[i("li",[r._v("向master进程发送HUP信号")]),r._v(" "),i("li",[r._v("master进程校验配置语法是否正确")]),r._v(" "),i("li",[r._v("master进程打开新的监听端口（配置文件存在新增加监听的端口）")]),r._v(" "),i("li",[r._v("master进程用新配置启动新的worker子进程")]),r._v(" "),i("li",[r._v("master进程向旧的worker进程发送QUIT信号（优雅结束进程）")]),r._v(" "),i("li",[r._v("旧的worker进程关闭监听句柄，处理完当前连接后结束进程")])]),r._v(" "),i("p",[r._v("执行完上面六步，就完成了nginx的平滑重启")]),r._v(" "),i("h2",{attrs:{id:"热升级具体流程"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#热升级具体流程","aria-hidden":"true"}},[r._v("#")]),r._v(" 热升级具体流程")]),r._v(" "),i("ol",[i("li",[r._v("先将nginx启动的二进制文件进行备份，再将编译的新版本二进制文件替换掉旧版本的")]),r._v(" "),i("li",[r._v("向master进程发送USR2信号")]),r._v(" "),i("li",[r._v("master修改进程修改nginx.pid文件的名字，加后缀.oldbin")]),r._v(" "),i("li",[r._v("master进程用新的nginx二进制文件启动新的master进程")]),r._v(" "),i("li",[r._v("向旧的master进程发送WINCH信号，关闭掉旧的worker进程，保留老的master进程")]),r._v(" "),i("li",[r._v("回滚：向旧的master发送HUP信号，向新的master发送QUIT信号")])]),r._v(" "),i("h2",{attrs:{id:"优雅关闭worker进程"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#优雅关闭worker进程","aria-hidden":"true"}},[r._v("#")]),r._v(" 优雅关闭worker进程")]),r._v(" "),i("p",[r._v("nginx只能做到对http请求，其它请求是不可以的。优雅的关闭主要经历如下阶段")]),r._v(" "),i("ol",[i("li",[r._v("设置定时器woker_shutdown_timeout，这个时间是通过配置文件来设置的")]),r._v(" "),i("li",[r._v("关闭监听句柄，就是新的请求将会交给新启动的worker去处理")]),r._v(" "),i("li",[r._v("关闭空闲连接")]),r._v(" "),i("li",[r._v("在循环中等待全部连接关闭")]),r._v(" "),i("li",[r._v("退出进程")])]),r._v(" "),i("h2",{attrs:{id:"nginx的事件驱动模型"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#nginx的事件驱动模型","aria-hidden":"true"}},[r._v("#")]),r._v(" nginx的事件驱动模型")]),r._v(" "),i("p",[r._v("nginx在启动后，不同的请求都是以事件的形式被nginx接收，事件是按照下图被处理的\n"),i("img",{attrs:{src:a(159),alt:"事件模型"}}),r._v("\n请求会被当作事件的形式放入到一个事件队列中，nginx会去处理队列里面的事件，在处理事件时，也可向队列中加入新的事件，比如我对一个http请求处理完成了，需要向客户端返回数据了，需要往队列中加入一个事件；当事件队列为空之后，就回到了wait for events on connection（等待连接事件）")]),r._v(" "),i("h2",{attrs:{id:"nginx的模块"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#nginx的模块","aria-hidden":"true"}},[r._v("#")]),r._v(" nginx的模块")]),r._v(" "),i("p",[r._v("使用nginx的模块，需要注意以下几点")]),r._v(" "),i("ol",[i("li",[r._v("编译安装时，是否将模块编译进来了")]),r._v(" "),i("li",[r._v("模块提供哪些配置项")]),r._v(" "),i("li",[r._v("模块何时被使用，有些模块默认会被使用，有些模块需要加入特定配置项并配置正确才会被使用")]),r._v(" "),i("li",[r._v("模块提供哪些变量可以使用")])]),r._v(" "),i("p",[r._v("了解一个模块如何使用，可以通过官方文档查看，如果你能阅读源码，可以在解压后的文件夹中src中找到"),i("code",[r._v(".c")]),r._v("结尾的源码文件，源码文件中使用"),i("code",[r._v("ngx_command_t")]),r._v("结构体定义该模块能使用的指令，官方文档中没有的指令可能在源码中就能找到")]),r._v(" "),i("h3",{attrs:{id:"模块的分类"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#模块的分类","aria-hidden":"true"}},[r._v("#")]),r._v(" 模块的分类")]),r._v(" "),i("p",[r._v("下图是nginx的模块分类图\n"),i("img",{attrs:{src:a(160),alt:"nginx的模块"}})])])}],n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},i,!1,null,null,null);e.options.__file="architecture.md";t.default=e.exports}}]);