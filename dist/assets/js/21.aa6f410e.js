(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{181:function(e,r,a){"use strict";a.r(r);var t=a(0),s=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,r=e.$createElement,a=e._self._c||r;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"swoole"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#swoole","aria-hidden":"true"}},[e._v("#")]),e._v(" Swoole")]),e._v(" "),a("h2",{attrs:{id:"写这篇博客的原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写这篇博客的原因","aria-hidden":"true"}},[e._v("#")]),e._v(" 写这篇博客的原因")]),e._v(" "),a("p",[e._v("基于swoole扩展开发的php框架（easyswoole、swoft等）已经很多了，框架文档也写的很详细，使用起来非常方便。但是不深入理解swoole扩展工作机制的话，当遇到一些通过看文档解决不了的问题时，那么如果你对swoole工作机制理解的深入的话，也许很快就能够找到解决的办法。")]),e._v(" "),a("h2",{attrs:{id:"swoole简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#swoole简介","aria-hidden":"true"}},[e._v("#")]),e._v(" swoole简介")]),e._v(" "),a("p",[e._v("官方简介如下：")]),e._v(" "),a("blockquote",[a("p",[e._v("使 PHP 开发人员可以编写高性能的异步并发 TCP、UDP、Unix Socket、HTTP，WebSocket 服务。Swoole 可以广泛应用于互联网、移动通信、企业软件、云计算、网络游戏、物联网（IOT）、车联网、智能家居等领域。 使用 PHP + Swoole 作为网络通信框架，可以使企业 IT 研发团队的效率大大提升，更加专注于开发创新产品。")])]),e._v(" "),a("p",[e._v("看介绍，让php开发人员不局限于开发web应用。下面从启动一个server开始，来揭开swoole的神秘面纱。")]),e._v(" "),a("h2",{attrs:{id:"swoole的版本和环境介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#swoole的版本和环境介绍","aria-hidden":"true"}},[e._v("#")]),e._v(" swoole的版本和环境介绍")]),e._v(" "),a("p",[e._v("swoole-1.x版本需要PHP >= 5.3.10，swoole-4.x版本需要PHP >= 7.0.0，php只需要安装基本的扩展即可")]),e._v(" "),a("p",[e._v("Unix系的操作系统（linux、Mac OSX、ubantu等），可以直接在github下载swoole的源码编译安装扩展，或者使用pecl安装，源码编译安装优点是可以在configure时指定开启哪些选项。")]),e._v(" "),a("p",[e._v("windows系统可以通过安装cygwin，将swoole跑在cygin的环境中，或者win10开启linux子系统，将swoole跑在子系统中")]),e._v(" "),a("p",[e._v("对于扩展的安装就不做过多的介绍。接下来的内容是按照")]),e._v(" "),a("h2",{attrs:{id:"启动一个http-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动一个http-server","aria-hidden":"true"}},[e._v("#")]),e._v(" 启动一个http-server")]),e._v(" "),a("p",[e._v("先从启动一个http_server来开启swoole之旅。")]),e._v(" "),a("p",[e._v("代码如下：")]),e._v(" "),a("h2",{attrs:{id:"swoole的进程模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#swoole的进程模型","aria-hidden":"true"}},[e._v("#")]),e._v(" swoole的进程模型")]),e._v(" "),a("p",[e._v("swoole启动一个Server后，会存在三种进程")]),e._v(" "),a("ol",[a("li",[e._v("Master")]),e._v(" "),a("li",[e._v("Manager")]),e._v(" "),a("li",[e._v("worker/taskWorker")])]),e._v(" "),a("h3",{attrs:{id:"master进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#master进程","aria-hidden":"true"}},[e._v("#")]),e._v(" Master进程")]),e._v(" "),a("p",[e._v("是一个多线程程序，包括主线程和Reactor")]),e._v(" "),a("ol",[a("li",[e._v("主线程主要是Accept操作和信号处理")]),e._v(" "),a("li",[e._v("Reactor线程负责处理TCP连接、网络IO和收发数据等")])]),e._v(" "),a("h3",{attrs:{id:"manager进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#manager进程","aria-hidden":"true"}},[e._v("#")]),e._v(" Manager进程")]),e._v(" "),a("p",[e._v("专门负责worker/task进程的fork操作和管理, manager的任务本来可以由master进程来负责，对于多线程的Master进程而言，想要多Worker进程就必须fork操作，但是fork操作是不安全的. 所以Manager进程就是为了保证Master进程的稳定.")]),e._v(" "),a("p",[e._v("通常，worker进程被误杀或者由于程序的原因会异常退出，Manager进程为了保证服务的稳定性，会重新拉起新的worker进程")]),e._v(" "),a("h3",{attrs:{id:"worker-taskworker进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#worker-taskworker进程","aria-hidden":"true"}},[e._v("#")]),e._v(" worker/taskWorker进程")]),e._v(" "),a("p",[e._v("worker进程：负责具体的业务代码\ntask进程：负责处理时间比较久的任务")])])}],!1,null,null,null);s.options.__file="README.md";r.default=s.exports}}]);