(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{164:function(t,a,s){"use strict";s.r(a);var n=s(0),r=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"数据结构与算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据结构与算法","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据结构与算法")]),t._v(" "),s("h2",{attrs:{id:"简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简介","aria-hidden":"true"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),s("p",[t._v("数据结构是指数据存储的结构，算法是操作数据的一类方法。好比如图书馆的藏书，为了方便查找，会给树对应上编号，这些编号比做数据结构，那么根据编号如何找到对应的书籍比做算法。")]),t._v(" "),s("p",[t._v("数据结构是为算法服务的，算法要作用在特定的数据结构之上。所以说数据结构和算法是相辅相成的。")]),t._v(" "),s("h2",{attrs:{id:"算法复杂度分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法复杂度分析","aria-hidden":"true"}},[t._v("#")]),t._v(" 算法复杂度分析")]),t._v(" "),s("p",[t._v("数据结构和算法解决了代码运行的快和省的问题，即让代码运行的够快，并且让代码在运行的时候能更少占用内存。算法复杂度分析就是用一组数学公式来描述算法的执行时间和内存占用。")]),t._v(" "),s("h3",{attrs:{id:"大o复杂度表示法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#大o复杂度表示法","aria-hidden":"true"}},[t._v("#")]),t._v(" 大O复杂度表示法")]),t._v(" "),s("p",[t._v("下面我们以一段代码来演示大O复杂度表示法是如何演算得到的")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("cal")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sum "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     sum "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" sum "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" i"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sum"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}],!1,null,null,null);r.options.__file="README.md";a.default=r.exports}}]);